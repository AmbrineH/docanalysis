# Patch generated by Pyment v0.3.3

--- a/docanalysis\xml_lib.py
+++ b/docanalysis\xml_lib.py
@@ -110,6 +110,7 @@
 
 
 class XmlLib:
+    """ """
 
     def __init__(self, file=None, section_dir=SECTIONS):
         self.max_file_len = 30
@@ -122,14 +123,22 @@
 #         self.logger.setLevel(logging.INFO)
 
     def read(self, file):
-        """reads XML file , saves file, and parses to self.root"""
+        """reads XML file , saves file, and parses to self.root
+
+        :param file: 
+
+        """
         if file is not None:
             self.file = file
             self.parent_path = Path(file).parent.absolute()
             self.root = XmlLib.parse_xml_file_to_root(file)
 
     def make_sections(self, section_dir):
-        """recursively traverse XML tree and write files for each terminal element"""
+        """recursively traverse XML tree and write files for each terminal element
+
+        :param section_dir: 
+
+        """
         self.section_dir = self.make_sections_path(section_dir)
         # indent = 0
         # filename = "1" + "_" + self.root.tag
@@ -143,7 +152,11 @@
 
     @staticmethod
     def parse_xml_file_to_root(file):
-        """read xml path and create root element"""
+        """read xml path and create root element
+
+        :param file: 
+
+        """
         file = str(file)  # if file is Path
         if not os.path.exists(file):
             raise IOError("path does not exist", file)
@@ -154,18 +167,33 @@
 
     @staticmethod
     def parse_xml_string_to_root(xml):
-        """read xml string and parse to root element"""
+        """read xml string and parse to root element
+
+        :param xml: 
+
+        """
         from io import StringIO
         tree = LXET.parse(StringIO(xml), LXET.XMLParser(ns_clean=True))
         return tree.getroot()
 
     def make_sections_path(self, section_dir):
+        """
+
+        :param section_dir: 
+
+        """
         self.section_path = os.path.join(self.parent_path, section_dir)
         if not os.path.exists(self.section_path):
             FileLib.force_mkdir(self.section_path)
         return self.section_path
 
     def make_descendant_tree(self, elem, outdir):
+        """
+
+        :param elem: 
+        :param outdir: 
+
+        """
 
         self.logger.setLevel(logging.INFO)
         if elem.tag in TERMINALS:
@@ -220,8 +248,11 @@
     @staticmethod
     def get_sec_title(sec):
         """get title of JATS section
-
+        
         :sec: section (normally sec element
+
+        :param sec: 
+
         """
         title = None
         for elem in list(sec):
@@ -240,11 +271,23 @@
 
     @staticmethod
     def remove_all(elem, xpath):
+        """
+
+        :param elem: 
+        :param xpath: 
+
+        """
         for el in elem.xpath(xpath):
             el.getparent().remove(el)
 
     @staticmethod
     def get_or_create_child(parent, tag):
+        """
+
+        :param parent: 
+        :param tag: 
+
+        """
         child = None
         if parent is not None:
             child = parent.find(tag)
@@ -254,12 +297,18 @@
 
     @classmethod
     def get_text(cls, node):
-        """get text children as string"""
+        """get text children as string
+
+        :param node: 
+
+        """
         return ''.join(node.itertext())
 
     @staticmethod
     def add_UTF8(html_root):
         """adds UTF8 declaration to root
+
+        :param html_root: 
 
         """
         from lxml import etree as LXET
@@ -270,6 +319,10 @@
     @staticmethod
     def replace_nodes_with_text(data, xpath, replacement):
         """replace nodes with specific text
+
+        :param data: 
+        :param xpath: 
+        :param replacement: 
 
         """
         print(data, xpath, replacement)
@@ -292,9 +345,12 @@
     @classmethod
     def remove_all_tags(cls, xml_string):
         """remove all tags from text
-
+        
         :xml_string: string to be flattened
+
+        :param xml_string: 
         :returns: flattened string
+
         """
         tree = LXET.fromstring(xml_string.encode("utf-8"))
         strg = LXET.tostring(tree, encoding='utf8',
@@ -303,6 +359,12 @@
 
     @classmethod
     def xslt_transform(cls, data, xslt_file):
+        """
+
+        :param data: 
+        :param xslt_file: 
+
+        """
         xslt_root = LXET.parse(xslt_file)
         transform = LXET.XSLT(xslt_root)
         print("XSLT log", transform.error_log)
@@ -315,6 +377,12 @@
 
     @classmethod
     def xslt_transform_tostring(cls, data, xslt_file):
+        """
+
+        :param data: 
+        :param xslt_file: 
+
+        """
         root = cls.xslt_transform(data, xslt_file)
         return LXET.tostring(root).decode("UTF-8") if root is not None else None
 
@@ -325,15 +393,16 @@
 
 
 class DataTable:
-    """
-<html xmlns="http://www.w3.org/1999/xhtml">
- <head charset="UTF-8">
-  <title>ffml</title>
-  <link rel="stylesheet" type="text/css" href="http://ajax.aspnetcdn.com/ajax/jquery.dataTables/1.9.4/css/jquery.dataTables.css"/>
-  <script src="http://ajax.aspnetcdn.com/ajax/jQuery/jquery-1.8.2.min.js" charset="UTF-8" type="text/javascript"> </script>
-  <script src="http://ajax.aspnetcdn.com/ajax/jquery.dataTables/1.9.4/jquery.dataTables.min.js" charset="UTF-8" type="text/javascript"> </script>
-  <script charset="UTF-8" type="text/javascript">$(function() { $("#results").dataTable(); }) </script>
- </head>
+    """<html xmlns="http://www.w3.org/1999/xhtml">
+     <head charset="UTF-8">
+      <title>ffml</title>
+      <link rel="stylesheet" type="text/css" href="http://ajax.aspnetcdn.com/ajax/jquery.dataTables/1.9.4/css/jquery.dataTables.css"/>
+      <script src="http://ajax.aspnetcdn.com/ajax/jQuery/jquery-1.8.2.min.js" charset="UTF-8" type="text/javascript"> </script>
+      <script src="http://ajax.aspnetcdn.com/ajax/jquery.dataTables/1.9.4/jquery.dataTables.min.js" charset="UTF-8" type="text/javascript"> </script>
+      <script charset="UTF-8" type="text/javascript">$(function() { $("#results").dataTable(); }) </script>
+     </head>
+
+
     """
 
     def __init__(self, title, colheads=None, rowdata=None):
@@ -358,12 +427,14 @@
 
 
     def create_head(self, title):
-        """
-          <title>ffml</title>
+        """<title>ffml</title>
           <link rel="stylesheet" type="text/css" href="http://ajax.aspnetcdn.com/ajax/jquery.dataTables/1.9.4/css/jquery.dataTables.css"/>
           <script src="http://ajax.aspnetcdn.com/ajax/jQuery/jquery-1.8.2.min.js" charset="UTF-8" type="text/javascript"> </script>
           <script src="http://ajax.aspnetcdn.com/ajax/jquery.dataTables/1.9.4/jquery.dataTables.min.js" charset="UTF-8" type="text/javascript"> </script>
           <script charset="UTF-8" type="text/javascript">$(function() { $("#results").dataTable(); }) </script>
+
+        :param title: 
+
         """
 
         self.head = LXET.SubElement(self.html, H_HEAD)
@@ -394,10 +465,9 @@
         script.text = "$(function() { $(\"#results\").dataTable(); }) "
 
     def create_table_thead_tbody(self):
-        """
-     <body>
-      <div class="bs-example table-responsive">
-       <table class="table table-striped table-bordered table-hover" id="results">
+        """<body>
+              <div class="bs-example table-responsive">
+               <table class="table table-striped table-bordered table-hover" id="results">
         <thead>
          <tr>
           <th>articles</th>
@@ -406,6 +476,8 @@
           <th>word:frequencies</th>
          </tr>
         </thead>
+
+
         """
 
         self.body = LXET.SubElement(self.html, H_BODY)
@@ -418,6 +490,11 @@
         self.tbody = LXET.SubElement(self.table, H_TBODY)
 
     def add_column_heads(self, colheads):
+        """
+
+        :param colheads: 
+
+        """
         if colheads is not None:
             self.thead_tr = LXET.SubElement(self.thead, H_TR)
             for colhead in colheads:
@@ -425,16 +502,22 @@
                 th.text = str(colhead)
 
     def add_rows(self, rowdata):
+        """
+
+        :param rowdata: 
+
+        """
         if rowdata is not None:
             for row in rowdata:
                 self.add_row_old(row)
 
     def add_row_old(self, row: [str]):
-        """ creates new <tr> in <tbody>
+        """creates new <tr> in <tbody>
         creates <td> child elements of row containing string values
 
         :param row: list of str
-        :rtype: object
+        :param row: [str]: 
+
         """
         if row is not None:
             tr = LXET.SubElement(self.tbody, H_TR)
@@ -444,15 +527,15 @@
                 # print("td", td.text)
 
     def make_row(self):
-        """
-
-        :return: row element
-        """
+        """:return: row element"""
         return LXET.SubElement(self.tbody, H_TR)
 
     def append_contained_text(self, parent, tag, text):
         """create element <tag> and add text child
-        :rtype: element
+
+        :param parent: 
+        :param tag: 
+        :param text: 
 
         """
         subelem = LXET.SubElement(parent, tag)
@@ -462,7 +545,8 @@
     def write_full_data_tables(self, output_dir: str) -> None:
         """
 
-        :rtype: object
+        :param output_dir: str: 
+
         """
         if not os.path.exists(output_dir):
             os.makedirs(output_dir)
@@ -483,6 +567,7 @@
 
 
 class Web:
+    """ """
     def __init__(self):
         import tkinter as tk
         root = tk.Tk()
@@ -492,6 +577,12 @@
 
     @classmethod
     def display_html(cls, master, site):
+        """
+
+        :param master: 
+        :param site: 
+
+        """
         import tkinterweb
         frame = tkinterweb.HtmlFrame(master)
         frame.load_website(site)
@@ -499,11 +590,13 @@
 
     @classmethod
     def tkinterweb_demo(cls):
+        """ """
         from tkinterweb import Demo
         Demo()
 
 
 def main():
+    """ """
 
     XmlLib().test_recurse_sections()  # recursively list sections
 
@@ -515,11 +608,13 @@
 
 
 def test_xml():
+    """ """
     xml_string = "<a>foo <b>and</b> with <d/> bar</a>"
     print(XmlLib.remove_all_tags(xml_string))
 
 
 def test_data_table():
+    """ """
     import pprint
     data_table = DataTable("test")
     data_table.add_column_heads(["a", "b", "c"])
